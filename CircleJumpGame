# Circle Jump Game - Complete Android Project

## Project Structure
```
CircleJumpGame/
├── app/
│   ├── src/
│   │   ├── main/
│   │   │   ├── java/com/yourname/circlejump/
│   │   │   │   ├── MainActivity.kt
│   │   │   │   ├── GameView.kt
│   │   │   │   ├── Player.kt
│   │   │   │   └── Obstacle.kt
│   │   │   ├── res/values/
│   │   │   │   ├── strings.xml
│   │   │   │   ├── colors.xml
│   │   │   │   └── themes.xml
│   │   │   └── AndroidManifest.xml
│   │   └── build.gradle
│   └── build.gradle (Project level)
└── settings.gradle
```

## Installation Instructions

1. **GitHub Repository Creation:**
   - Go to github.com and create new repository named "CircleJumpGame"
   - Make it Public
   - Check "Add README"

2. **Download these files and upload to your repository:**

---

## 📁 File Contents

### 1. MainActivity.kt
```kotlin
package com.yourname.circlejump

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {
    private lateinit var gameView: GameView
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Initialize game view
        gameView = GameView(this)
        setContentView(gameView)
    }
    
    override fun onResume() {
        super.onResume()
        gameView.resumeGame()
    }
    
    override fun onPause() {
        super.onPause()
        gameView.pauseGame()
    }
}
```

### 2. GameView.kt
```kotlin
package com.yourname.circlejump

import android.content.Context
import android.graphics.*
import android.view.MotionEvent
import android.view.View
import kotlin.random.Random

class GameView(context: Context) : View(context) {
    
    // Game objects
    private var player: Player
    private var obstacles = mutableListOf<Obstacle>()
    private var score = 0
    private var gameRunning = true
    private var gameStarted = false
    
    // Paint objects for drawing
    private val playerPaint = Paint().apply {
        color = Color.BLUE
        isAntiAlias = true
    }
    
    private val obstaclePaint = Paint().apply {
        color = Color.RED
        isAntiAlias = true
    }
    
    private val textPaint = Paint().apply {
        color = Color.WHITE
        textSize = 60f
        textAlign = Paint.Align.CENTER
        isAntiAlias = true
        isFakeBoldText = true
    }
    
    private val backgroundPaint = Paint().apply {
        color = Color.parseColor("#87CEEB")
    }
    
    // Game timer
    private var gameThread: GameThread? = null
    private var isGameThreadRunning = false
    
    init {
        player = Player(200f, 800f)
        startGameThread()
    }
    
    fun resumeGame() {
        if (!isGameThreadRunning) {
            startGameThread()
        }
    }
    
    fun pauseGame() {
        stopGameThread()
    }
    
    private fun startGameThread() {
        if (!isGameThreadRunning) {
            isGameThreadRunning = true
            gameThread = GameThread()
            gameThread?.start()
        }
    }
    
    private fun stopGameThread() {
        isGameThreadRunning = false
        gameThread = null
    }
    
    override fun onDraw(canvas: Canvas?) {
        super.onDraw(canvas)
        canvas?.let { c ->
            // Draw background
            c.drawRect(0f, 0f, width.toFloat(), height.toFloat(), backgroundPaint)
            
            if (!gameStarted) {
                // Start screen
                c.drawText("🔵 Circle Jump", width/2f, height/2f - 150, textPaint)
                textPaint.textSize = 40f
                c.drawText("Tap to Start", width/2f, height/2f, textPaint)
                c.drawText("Avoid Red Circles!", width/2f, height/2f + 80, textPaint)
                textPaint.textSize = 60f
            } else if (gameRunning) {
                // Draw player
                c.drawCircle(player.x, player.y, player.radius, playerPaint)
                
                // Draw obstacles
                obstacles.forEach { obstacle ->
                    c.drawCircle(obstacle.x, obstacle.y, obstacle.radius, obstaclePaint)
                }
                
                // Draw score
                textPaint.textSize = 50f
                c.drawText("Score: $score", width/2f, 100f, textPaint)
                textPaint.textSize = 60f
            } else {
                // Game over screen
                c.drawText("💥 Game Over!", width/2f, height/2f - 100, textPaint)
                textPaint.textSize = 50f
                c.drawText("Final Score: $score", width/2f, height/2f, textPaint)
                c.drawText("Tap to Restart", width/2f, height/2f + 100, textPaint)
                textPaint.textSize = 60f
            }
        }
    }
    
    override fun onTouchEvent(event: MotionEvent?): Boolean {
        event?.let {
            if (it.action == MotionEvent.ACTION_DOWN) {
                if (!gameStarted) {
                    startGame()
                } else if (!gameRunning) {
                    restartGame()
                } else {
                    player.jump()
                }
            }
        }
        return true
    }
    
    private fun startGame() {
        gameStarted = true
        gameRunning = true
        score = 0
        obstacles.clear()
        player.reset(width/2f, height * 0.8f)
    }
    
    private fun restartGame() {
        startGame()
    }
    
    private fun updateGame() {
        if (!gameRunning || !gameStarted) return
        
        // Update player
        player.update(height.toFloat())
        
        // Add new obstacles randomly
        if (Random.nextInt(120) < 4) {
            obstacles.add(Obstacle(Random.nextFloat() * (width - 60) + 30, -50f))
        }
        
        // Update obstacles
        obstacles.forEach { it.update() }
        
        // Remove off-screen obstacles and increase score
        obstacles.removeAll { obstacle ->
            if (obstacle.y > height + 100) {
                score += 10
                true
            } else false
        }
        
        // Check collisions
        obstacles.forEach { obstacle ->
            if (player.collidesWith(obstacle)) {
                gameRunning = false
            }
        }
        
        // Keep player on screen horizontally
        if (player.x < player.radius) player.x = player.radius
        if (player.x > width - player.radius) player.x = width - player.radius
    }
    
    // Game loop thread
    inner class GameThread : Thread() {
        override fun run() {
            while (isGameThreadRunning) {
                try {
                    updateGame()
                    post { invalidate() }
                    sleep(16) // ~60 FPS
                } catch (e: InterruptedException) {
                    break
                }
            }
        }
    }
}
```

### 3. Player.kt
```kotlin
package com.yourname.circlejump

import kotlin.math.sqrt

data class Player(var x: Float, var y: Float) {
    val radius = 40f
    private var velocityY = 0f
    private var velocityX = 0f
    private val gravity = 0.6f
    private val jumpStrength = -18f
    private val horizontalSpeed = 8f
    
    fun update(screenHeight: Float) {
        // Apply gravity
        velocityY += gravity
        y += velocityY
        
        // Subtle horizontal movement for more dynamic gameplay
        if (velocityY < 0) { // When jumping up
            x += velocityX
            velocityX *= 0.95f // Slow down horizontal movement
        }
        
        // Game over if player falls off screen
        if (y > screenHeight + radius) {
            // Game will end in GameView
        }
    }
    
    fun jump() {
        velocityY = jumpStrength
        // Add slight random horizontal movement
        velocityX = (Math.random() - 0.5).toFloat() * horizontalSpeed
    }
    
    fun reset(newX: Float, newY: Float) {
        x = newX
        y = newY
        velocityY = 0f
        velocityX = 0f
    }
    
    fun collidesWith(obstacle: Obstacle): Boolean {
        val dx = x - obstacle.x
        val dy = y - obstacle.y
        val distance = sqrt(dx * dx + dy * dy)
        return distance < radius + obstacle.radius - 5 // Slightly more forgiving collision
    }
}
```

### 4. Obstacle.kt
```kotlin
package com.yourname.circlejump

data class Obstacle(var x: Float, var y: Float) {
    val radius = 35f
    private var speed = (4..8).random().toFloat()
    
    fun update() {
        y += speed
        // Increase speed slightly over time for difficulty
        speed += 0.01f
    }
}
```

### 5. AndroidManifest.xml
```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.CircleJumpGame"
        tools:targetApi="31">
        
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:screenOrientation="portrait"
            android:theme="@style/Theme.AppCompat.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>
```

### 6. build.gradle (Module: app)
```gradle
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.yourname.circlejump'
    compileSdk 34

    defaultConfig {
        applicationId "com.yourname.circlejump"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    
    // For ads later
    // implementation 'com.google.android.gms:play-services-ads:22.6.0'
}
```

### 7. strings.xml (res/values/)
```xml
<resources>
    <string name="app_name">Circle Jump</string>
</resources>
```

### 8. colors.xml (res/values/)
```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
    <color name="game_blue">#FF2196F3</color>
    <color name="game_red">#FFF44336</color>
</resources>
```

---

## 🚀 How to Use:

1. **Create GitHub Repository** called "CircleJumpGame"
2. **Copy each file** above into respective folders
3. **Change package name** `com.yourname.circlejump` to your actual package name
4. **Commit and push** to GitHub
5. **Clone in Android Studio**: File → New → Project from Version Control

**Or Direct Android Studio Method:**
1. Create Empty Activity project
2. Replace default files with above content
3. Delete `activity_main.xml` from res/layout/
4. Build and run!

## 📱 Game Features:
- Touch to jump mechanism
- Gravity physics
- Random obstacle generation
- Score system
- Game over/restart functionality
- Portrait orientation locked
- Ready for AdMob integration

**Ready for monetization with ads!** 💰
